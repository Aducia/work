import base64
import json
import hmac
import hashlib
import time

def base64url_decode(data):
    padding = '=' * (-len(data) % 4)
    return base64.urlsafe_b64decode(data + padding)

def verify_jwt(token, secret):
    try:
        header_b64, payload_b64, signature_b64 = token.split('.')
        
        # –û–±—á–∏—Å–ª—é—î–º–æ –æ—á—ñ–∫—É–≤–∞–Ω–∏–π –ø—ñ–¥–ø–∏—Å
        signing_input = f"{header_b64}.{payload_b64}".encode()
        expected_signature = hmac.new(secret.encode(), signing_input, hashlib.sha256).digest()
        expected_signature_b64 = base64.urlsafe_b64encode(expected_signature).rstrip(b'=')

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –ø—ñ–¥–ø–∏—Å
        if expected_signature_b64 != signature_b64.encode():
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–¥–ø–∏—Å")
            return False

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∞—Å –¥—ñ—ó —Ç–æ–∫–µ–Ω–∞ (exp)
        payload = json.loads(base64url_decode(payload_b64))
        if "exp" in payload and time.time() > payload["exp"]:
            print("‚ùå –¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π")
            return False

        print (f"‚úÖ –¢–æ–∫–µ–Ω –≤–∞–ª—ñ–¥–Ω–∏–π\n–î–∞–Ω—ñ: {payload}")
        return True

    except Exception as e:
        return False
    

# üîπ –ø—Ä–∏–∫–ª–∞–¥ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è
token = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE3NTk4Mjc2MDAsInN1YiI6IjEyMzQ1Njc4OTAiLCJuYW1lIjoiSm9obiBEb2UiLCJhZG1pbiI6dHJ1ZSwiaWF0IjoxNTE2MjM5MDIyfQ.6eCHD_JMHYRM8VvYW4jHDP3PRGL7WTBsL-sKCDyL0ng"
secret = "a-string-secret-at-least-256-bits-long"

print(verify_jwt(token, secret))
